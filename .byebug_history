continue
asset_path("MySCSS.scss")
asset_path("Russian.json")
continue
asset_path("Russian.json")
continue
accessible?(table_id)
!accessible?(table_id)
continue
!accessible?(table_id)
continue
@records
continue
@coordinates_y
@coordinates_x
continue
 @record_cells = Cell.where(table_id: @table.id)
continue
@record_cells.select(coordinate_x: 2)
@record_cells.find(coordinate_x: 2)
@record_cells.find_by(coordinate_x: 2)
exit
@record_cells.where(coordinate_x: 2)
@record_cells
continue
@record_cells.map{|c| "#{c.row.name}_#{c.column.name}"}
continue
Cell.includes(:column, :row).where(table_id: @table.id).order('coordinates.disposition','coordinates.order').blank?
Cell.includes(:column, :row).where(table_id: @table.id).order('coordinates.order').blank?
Cell.includes(:column, :row).where(table_id: @table.id).order('rows.order').blank?
Cell.includes(:column, :row).where(table_id: @table.id).order('coordinates.order').blank?
Cell.includes(:column, :row).where(table_id: @table.id).order('coordinate.order').blank?
Cell.includes(:column, :row).where(table_id: @table.id).order('coordinate.order')
@record_cells.blank?
continue
@record_cells.blank?
@record_cells
continue
@record_cells.blank?
@record_cells
continue
@record_cells = Cell.where(table_id: @table.id).includes(:column, :row).order('row.order', 'column.order')
@record_cells = Cell.where(table_id: @table.id).includes(:column, :row).order('row.order')
@record_cells.first.row
@record_cells.first
@record_cells
Cell.where(table_id: @table.id).includes(:column, :row)
@record_cells
continue
@record
@table
continue
self.row.superior_id == self.coordinate_x
self.raw.superior_id == self.coordinate_x
self.column.superior_id == self.coordinate_x
self.
self.column.superior_id
continue
set_value(rc, @record.id)
continue
DecimalCell.all
DecimalCell.find_by(record_id: @record.id, cell_id: cell.id)
cell.decimal?
cell.integer?
cell
continue
key
value
key[%r{\Adata_(\d*)_[a-z]*\z}, 1]
key[%r{\Adata_\d*_([a-z]*)\z}, 1]
continue
value
key[%r{\Adata_\d*_([a-z]*)\z}, 1]
key[%r{\Adata_(\d*)_[a-z]*\z}, 1]
key
key[%r{\Adata_(\d*)_[a-z]*\z}, 1]
continue
key[%r{\Adata_\d*_\d*_([a-z]*)\z}, 1]
key[%r{\.*_([a-z]*)\z}, 1]
key[%r{\Adata_\d*_(\d*)_.*\z}, 1]
key[%r{\Adata_(\d*)_.*\z}, 1]
x
x[%r{\Adata_\d*_(\d*)_.*\z}, 1]
x[%r{\data_\d*_(\d*)_.*\z}, 1]
x[%r{\[data]_\d*_(\d*)_.*\z}, 1]
x[%r{\data_\d*_(\d*)_.*\z}, 1]
x[%r{\.*_.*_(\d*)_.*\z}, 1]
x[%r{\.*_\d*_(\d*)_.*\z}, 1]
x[%r{\.*_(\d*)_.*\z}, 1]
x[%r{\.*_(\d*).*\z}, 1]
x[%r{\.*_(\d).*\z}, 1]
x
continue
x
x[%r{\.*_(\d).*\z}, 1]
x[%r{\.*_\d_\d_(.*)\z}, 1]
x[%r{\.*__([a-z]*)\z}, 1]
x[%r{\.*_([a-z])\z}, 1]
x[%r{\.*\d_(.*)\z}, 1]
x[%r{\.*_\d_\d_(.*)\z}, 1]
x[%r{\.*_.*(.*)\z}, 1]
x[%r{\.*_(.*)\z}, 1]
x
continue
x
continue
data
continue
data
continue
data
continue
data
type
y
x
continue
params[:record][:record_cells].keys[0]
params[:record][:record_cells].keys
params[:record][:record_cells]
params[:record][:record_cells][1]
params[:record][:record_cells][0]
params[:record][:record_cells].first
params[:record][:record_cells]
params[:record_cells]
continue
params
continue
params
continue
answer
coordinate_of_row?
!Cell.where(coordinate_x: self.id).blank?
!Coordinate.where(superior_id: self.id).blank?
continue
self.disposition.column?
self.disposition_was == 'row'
self.disposition_was == :row
self.disposition_was == 'row'
self.disposition_was
self.disposition_was == 'row'
self.disposition_was == 'row' && self.disposition.column?
continue
self.disposition_was == Coordinate.dispositions[:row]
 Coordinate.dispositions[:row]
self.disposition_was
continue
@coordinate.errors.any?
continue
action_name
continue
@coordinate.dependents
@coordinate.superior
continue
@coordinate.superior
@coordinate
@coordinate.subordinations
@coordinate.subordination
@coordinate.dependents
@coordinate.superiors
@coordinate.superior
@coordinate.superior_id
@coordinate.superior
@coordinate.superior_id
@coordinate
@coordinate.dependent
@coordinate.superior
continue
f.object.superior_id
continue
@coordinates_y
@coordinates_y.first.disposition
@coordinates_x.first.disposition
@coordinates_x.first.desposition
@coordinates_x.count
@coordinates_x.first.disposition
@coordinates_x.first
@coordinates_x.first.desposition
@coordinates_x.count
@coordinates_y.count
continue
@coordinates_y.count
@coordinates_x.count
@coordinates_x
continue
params
